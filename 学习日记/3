#JavaScript
JavaScript介绍
    JavaScript 是一种轻量级的脚本语言。所谓“脚本语言”,指的是它不具备开发操作系统的能力,
    而是只用来编写控制其他大型应用程序的“脚本”
    JavaScript 是一种嵌入式(embedded)语言。它本身提供的核心语法不算很多

为什么学习Javascript
    操控浏览器的能力
    广泛的使用领域
    易学性

JavaScript与ECMAScript的关系
    ECMAScript和JavaScript的关系是,前者是后者的规格,后者是前者的一种实现。在日常场合,这两个词是可以互换的。

#语句、标识符
语句
    JavaScript 程序的单位是行(line),也就是一行一行地执行。一般情况下,每一行就是一个语句
    var num = 10;
    语句以分号结尾,一个分号就表示一个语句结束

标识符
    标识符(identifier)指的是用来识别各种值的合法名称。最常见的标识符就是变量名
    标识符是由:字母、美元符号($)、下划线()和数字组成,其中数字不能开头

温馨提示
    中文是合法的标识符,可以用作变量名(不推荐)

#变量
变量的重新赋值
    var num = 10;
    2num = 20;

变量提升
    JavaScript 引擎的工作方式是,先解析代码,获取所有被声明的变量,然后再一行一行地运行。
    这造成的结果,就是所有的变量的声明语句,都会被提升到代码的头部,这就叫做变量提升(hoisting)。
    console.1og(num);
    var num = 10;//结果是什么呢?

console.log()
    打印,可以在浏览器控制台看到结果


#JavaScript引入到文件
JavaScript常用引入方式
    嵌入HTML文件
    引入本地独立js文件
    引入网络来源文件

嵌入到HTML文件中
    <body>
        <script>
            var age =20
        </script>
    </body>

引入本地独立JS文件
    <body>
        <script type="text/javascript" src="./fan.js"> </script>
    </body>

引入网络来源文件
    <body>
        <script src="http://code.jquery.com/jquery1.2.1.min.js"></script>
    </body>
    网站页面控制台网络可以查看引入的状态

#JavaScript注释与常见的输出方式
    注释
        单行注释
        多行注释
    输出方式
        弹出框
        页面输出
        控制台输出

JavaScript注释
    源码中注释是不被引擎所解释的,它的作用是对代码进行解释。
    Javascript 提供两种注释的写法:一种是单行注释,用//起头;另一种是多行注释,放在/和/之间。
//这是单行注释

/*
这是
多行
注释
*/

嵌入在HTML文件中的注释
<!-- 注释 -->

JavaScript输出方式
    JavaScript有很多种输出方式,都可以让我们更直观的看到程序运行的结果
// 在浏览器中弹出一个对话框,然后把要输出的内容展示出来,alert都是把要输出的内容首先转换为 
字符串然后在输出的
alert("要输出的内容");

document.write("要输出的内容");

// 在控制台输出内容
console.1og("要输出的内容");

#数据类型
数据类型分类
    JavaScript 语言的每一个值,都属于某一种数据类型。JavaScript 的数据类型,共有六种。(ES6 又新增了第七种 Symbol 类型的值和第八种 BigInt类型)
    数值、布尔值、nul、字符串、undefined、对象

数据类型分类
原始类型(基础类型)
    数值、布尔值、字符串
    var age = 20;
    var name = “wang”;
    var learn = true;

合成类型(复合类型)
    (object)对象:因为一个对象往往是多个原始类型的值的合成,可以看作是一个存放各种值的容器
var user= {
    name:"wang",
    age:20,
    learn:true
}

温馨提示
    至于undefined和null,一般将它们看成两个特殊值。

#typeof运算符
数值-number
字符串-string
布尔值-boolean
对象-object

lavaScript 有三种方法,可以确定一个值到底是什么类型。而我们现在需要接触到的就是typeof

数值返回number
    typeof 123 //"number"

字符串返回string
    typeof '123'// "string"

布尔值返回boolean
    typeof false // "boolean"

对象返回object
    typeof {} // "object"

unll和undefined的区别
null与undefined都可以表示“没有”,含义非常相似。将一个变量赋值为undefined或null,老实说,语法效果几乎没区别。
既然含义与用法都差不多,为什么要同时设置两个这样的值,这不是无端增加复杂度,令初学者困扰吗?这与历史原因有关

#运算符之算数运算符
算数运算符
    加减乘除法运算符
    余数运算符
    自增运算符
    自减运算符

var num1 = 4
var num2 = 8

// 加减乘除
console.log(num1 + num2)
console.log(num1 - num2)
console.log(num1 * num2)
console.log(num1 / num2)

// 取余
console.log(num1 % num2)

// 自加自减,每次数值+1或-1
console.log(++ num1)
console.log(-- num1)

// ++放在后面和放在前面的区别,放在前面是先自加在打印,放在后面是先打印再自加
console.log(num2 ++);
console.log(num2);

//总结
var num3 = 2
var num4 = 3
console.log(num3++ + --num4);//4

#运算符之赋值运算符
运算符;表达式
=;赋值运算符
+=;x+=y等同于x=x+y
-=;x-=y等同于x=x-y
*=;x*=y等同于x=x*y
/=;x/=y等同于x=x/y
%=;x%=y等同于x=x%y

赋值运算符(Assignment Operators)用于给变量赋值
最常见的赋值运算符,当然就是等号(=)

// 将 1 赋值给变量 x
var x= 1;

// 将变量 y 的值赋值给变量 x
var x = y


#运算符之比较运算符
比较运算符;描述
<;小于运算符
>;大于运算符
<=;小于或等于运算符
>=;大于或等于运算符
==;相等运算符
===;严格相等运算符(数值和类型)
!=;不相等运算符
!==;严格不相等运算符(数值和类型)

比较运算符用于比较两个值的大小,然后返回一个布尔值,表示是否满足指定的条件
2 > 1 // true

#运算符之布尔运算符
布尔运算符
    取反运算符:!
    且运算符:&&
    或运算符:‖

取反运算符(!)
布尔值取反
!true // false
!false // true

非布尔值取反
    对于非布尔值,取反运算符会将其转为布尔值。可以这样记忆,以下六个值取反后为true,其他值都为false

温馨提示
    undefined
    nul
    false
    0
    NaN
    空字符串("")

且运算符(&&)
    多个条件都要满足
如果一个人一直做好事,突然有一天做了一件坏事,那么人们会认为这个人很虚伪,以前说不定都是装的!对这个人不在认可
console.log(10 < 20 && 10 > 5);// true

或运算符(||)
    满足一个条件即可
如果一个人一直做坏事,突然有一天做了一件好事,那么人们会认为这个人其实还不错,以前也许是另有原因!对这个人突然就认可了
console.10g(10 < 20 || 10 < 5);// true    

#条件语句之if语句
if结构先判断一个表达式的布尔值,然后根据布尔值的真伪,执行不同的语句。

if语句语法规范
if (布尔值){
    语句;
}

需要注意的是,“布尔值“往往由一个条件表达式产生的,必须放在圆括号中
var m= 3;
if(m === 3){
    m++;
}
console.log(m);//4

注意,if后面的表达式之中,不要混淆赋值表达式(=)、严格相等运算符(===)和相等运算符(==)。
尤其是赋值表达式不具有比较作用。
var x= 1;
var y=2;
if(2= y) {
    console.log(x);
}

#条件语句之if...else
if...else基本结构
    if代码块后面,还可以跟一个else代码块,表示不满足条件时,所要执行的代码。
if(m === 3){
    //满足条件时,执行的语句
} else {
    //不满足条件时,执行的语句
}

多个if...else连接
对同一个变量进行多次判断时,多个if...else语句可以连写在一起。
if(m ===0){
    //...
}else if(m===1){
    //...
}else if(m=== 2){
    //...
}else {
    //...
}

if...else嵌套
var eat = true;
var food ="猪肉炖粉条";
if(eat){
    if (food ="双椒鱼头"){
        console.log("双椒鱼头");
    }else{
        console.log("猪肉炖粉条");
    }
}else {
    console.log('不吃了');
}

else代码块总是与离自己最近的那个if语句配对

#条件语句之switch
多个if...else连在一起使用的时候,可以转为使用更方便的switch结构
switch(fruit){
    case"banana":
        //...
        break;
    case "apple":
        //...
        break;
    defaut:
        //...
}

需要注意的是,每个case代码块内部的break语句不能少,否则会接下去执行下一个case代码块,而不是跳出switch结构。

var x=1;

switch(x){
    case 1:
        console.1og('x等于1');
    case 2:
        console.1og('x等于2');
    default:
        console.1og('x 等于其他值');
}
//x等于1
//x等于2
//x等于其他值

#三元运算符
JavaScript还有一个三元运算符(即该运算符需要三个运算子)?：,也可以用于逻辑判断
(条件)? 表达式1:表达式2

这个三元运算符可以被视为if...else..的简写形式,因此可以用于多种场合,

判断一个整数是奇数与偶数
var num=12;
//判断是奇数还是偶数
if(num % 2 === 0){
    console.log("偶数");
}else{
    console.log("奇数");
}

num % 2 === 0 ? console.log("偶数") : console.log("奇数");
var result = num % 2 === 0 ? "偶数" : "奇数";
console.log(result)

#循环语句之for
循环语句用于重复执行某个操作
for语句就是循环命令,可以指定循环的起点、终点和终止条件。它的格式如下
for (初始化表达式; 条件; 迭代因子){
    语句
}

for语句后面的括号里面,有三个表达式
    初始化表达式(initialize):确定循环变量的初始值,只在循环开始时执行一次。
    布尔表达式(test):每轮循环开始时,都要执行这个条件表达式,只有值为真,才继续进行循环。
    迭代因子(increment):每轮循环的最后一个操作,通常用来递增循环变量。

//需求:从1打印到100
for(var i= 1;i<=100;i++){
    console.log(i);
}

// 需求:声明个x变量,输出所有小于这个变量的值(正整数)0 1 2 3 4 5 6 7 8 9
var x=10;
for(var i = 0;i<x;i++){
    console.log(i);
}

for语句的三个表达式,
可以省略任何一个也可以全部省略。
for( ; ; ){
    console.log('He1lo world');
}
温馨提示
如果三个都省略,结果就导致了一个无限循环(死循环)

实操
//循环输出1~100之间数字的和
//循环输出1000以内的奇数 不能被2整除的是奇数
// 打印九九乘法表

#循环语句之while
While语句包括一个循环条件和一段代码块,只要条件为真,就不断循环执行代码块。
while(条件){
    语句;
}

//需求:从1打印到100
var i=0;
while(i<100){
    console.1og('i 当前为:'+i);
    i=i+ 1;
}

下面的例子是一个无限循环,因为循环条件总是为真
while(true){
    console.log('He1lo,world');
}

所有for循环,都可以改写成while循环
// for
var x=3;
for(var i=0; i<x; i++){
    console.1og(i);
}
// while
var x=3;
var i=0;
while (i<x){
    console.log(i);
    i++;
}

#break语句和continue语句
break语句和continue语句都具有跳转作用,可以让代码不按既有的顺序执行

break
    break语句用于跳出代码块或循环
for(var i=0 ; i<5 ; i++){
    if(i === 3){
    break;
    }
console.log(i);
}

continue
    continue语句用于应即终止本轮循环返回循环结构的头部,开始下一轮循环
for(var i=0 ; i<5 ; i++){
    if(i === 3){
        continue ;
    }
    console.log(i);
}

#字符串
字符串就是零个或多个排在一起的字符,放在单引号或双引号之中
"fan"
'fan'

单引号字符串的内部,可以使用双引号。双引号字符串的内部,可以使用单引号
'key ="value'
"It's a long fan"

如果要在单引号字符串的内部,使用单引号,就必须在内部的单引号前面加上反斜杠,用来转义。双引号字符串内部使用双引号,也是如此
'Did she say \'Hello\'?'
//"Did she say 'He11o'?"

"Did she say \"Hello\"?"
// "Did she say "Hello"?"

温馨提示
    字符串默认只能写在一行内,分成多行将会报错

如果长字符串必须分成多行,可以在每一行的尾部使用反斜杠
var longstring = 'Long \
1ong \
string' ;
longstring
// "Long long long string"

length 属性
    length属性返回字符串的长度,该属性也是无法改变的
var s='fan';
s.length // 9

#字符串方法_charAt()
charAt 方法返回指定位置的字符,参数是从0开始编号的
var s= new string('fan');
s.charAt(1)//"t"

如果参数为负数,或大于等于字符串的长度charAt 返回空字符串
'fan'.charAt(-1)//""
'fan'.charAt(9)//""

#字符串方法_concat()
concat 方法用于连接两个字符串,返回一个新字符串.不改变原字符串
var sl = 'fan';
var s2 = 'sxt';

s1.concat(s2) // "fansxt"
s1 // "fan"

该方法可以接受多个参数
'sxt'.concat('fan','bjsxt')//'sxtfanbjsxt'

如果参数不是字符串,concat 方法会将其先转为字符串,然后再连接
var one = 1;
var two = 2;
var three ='3'
''.concat(one,two,three)//"123"

#字符串方法_substring()
subsring 方法用于从原字符串取出子字符串并返回,不改变原字符串。
它的第一个参数表示子字符串的开始位置,第二个位置表示结束位置(返回结果不含该位置)
"fan".substring(0,2)//"it"

如果省略第二个参数,则表示子字符串一直到原字符串的结束
'fan'.substring(2)//"lan"

如果第一个参数大于第二个参数, substring 方法会自动更换两个参数的位置
'fan'.substring(9,2)//"lan"
// 等同于
'fan'.substring(2,9)//"lan"

substring 方法会自动将负数转为0如果参数是负数

#字符串方法_substr()
substr 方法用于从原字符串取出子字符串并返回,不改变原字符串,跟 substring 方法的作用相同
substr 方法的第一个参数是子字符串的开始位置(从0开始计算),第二个参数是子字符串的长度
'fan'.substr(2,7);// lan

如果省略第二个参数,则表示子字符串一直到原字符串的结束
'fan'.substr(2)//"lan"

如果第一个参数是负数,表示倒数计算的字符位置。如果第二个参数是负数,将被自动转为0,因此会返回空字符串
'fan'.substr(-7)//"lan"
'fan'.substr(4,-1)//'itbai'

#字符串方法_indexOf()
indexOf方法用于确定一个字符串在另一个字符串中第一次出现的位置,返回结果是匹配开始的位置。
如果返回-1,就表示不匹配
'hello world'.indexof('o')//4
'fan'.indexof('sxt')//-1

indexOf方法还可以接受第二个参数,表示从该位置开始向后匹配
'he1lo world'.indexof('o',6)// 7

#字符串方法trim()
tim 方法用于去除字符串'两端'的空格(中间的不行),返回一个新字符串,不改变原字符串
'hello world '.trim()
//"hello world"

该方法去除的不仅是空格,还包括制表符(\t、\v)、换行符(\n)和回车符(\r)
'\r\ninfan \t'.trim()//'fan'

ES6扩展方法,trimEnd()和trimstart() 方法
'fan'.trimEnd();//    fan
"fan".trimstart();// fan    

#字符串方法_split()
split 方法按照给定规则分割字符串,返回一个由分割出来的子字符串组成的数组
'it|sxt|lan'.split('|') //["it","sxt","lan"]

如果分割规则为空字符串,则返回数组的成员是原字符串的每一个字符
'a|b|c'.split('') // ["a", "|", "b","|","c"]

如果省略参数,则返回数组的唯一成员就是原字符串
'it|sxt|bz'.split() // ['it|sxt|bz']

splt 方法还可以接受第二个参数,限定返回数组的最大成员数。
'it|sxt|bz'.split('|',0)// []
'it|sxt|bz'.split('|',1) // ["it"]
'it|sxt|bz'.split('|',2) // ['it','sxt']
'it|sxt|bz'.split('|',4) // ['it','bz']

#数组
数组(array)是按次序排列的一组值。每个值的位置都有编号(从0开始),整个数组用方括号表示。
var arr =['sxt','lan','it'];

两端的方括号是数组的标志。sxt是0号位置,lan是1号位置,it是2号位置

除了在定义时赋值,数组也可以先定义后赋值。
var arr=[];
arr[0]='sxt';
arr[1]='lan';
arr[2]= 'it';

任何类型的数据,都可以放入数组
var arr =[100,[1,2,3],false]

如果数组的元素还是数组,就形成了多维数组
var a =[[1,2],[3,4]];
a[0][1] // 2
a[1][1] // 4

length 属性
数组的length属性,返回数组的成员数量
['sxt','lan','it'].length // 3

#数组的遍历
数组的遍历可以考虑使用for循环或while循环
var a =['sxt','lan','it']
// for循环
for(var i=0 ; i<a.length ; i++){
    console.log(a[i]);
}

// while循环
var i=0;
while(i< a.length){
    console.log(a[i]);
    i++;
}

for ... in遍历数组
for(var i in a){
    console.log(a[i]);
}

#数组静态方法_Array.isArray()
Aray.isArray 方法返回一个布尔值,表示参数是否为数组。它可以弥补 typeor 运算符的不足
var arr =["wang",100,true];
console.log(typeof arr);// object

var arr =['sxt','lan','it'];
Array.isArray(arr)//true

#数组方法_push()/pop()
push方法用于在数组的末端添加一个或多个元素,并返回添加新元素后的数组长度。注意,该方法会改变原数
组
var arr = [];
arr.push("wang")
arr.push('fan')
arr.push(true,{})
arr //[wang,'fan',true,{}]

pop 方法用于删除数组的最后一个元素,并返回该元素。注意,该方法会改变原数组
var arr =['wang','fan','WEB前端'];
arr.pop()//'WEB前端'
arr //['wang','fan']

#数组方法_shift/unshift
shift 方法用于删除数组的第一个元素,并返回该元素。注意,该方法会改变原数组
var arr =['wang','fan'.'WEB前端'];
arr.shift()//'wang'
arr //['fan','WEB前端']

shift 方法可以遍历并清空一个数组
var list=[1,2,3,4,5,6];
var item;
while ( item=list.shift()) {
    console.1og(item);
}
list // []

unshift 方法用于在数组的第一个位置添加元素,并返回添加新元素后的数组长度。注意,该方法会改变原数组
var arr=['wang','fan','WEB前端'];
arr.unshift('lan');
arr //['lan','fan','wang','WEB前端']

unshi 方法可以接受多个参数,这些参数都会添加到目标数组头部
var arr =['wang','fan'];
arr.unshift('WEB前端','lan')
arr //['WEB前端','lan ','wang','fan']

#数组方法_jion()
join 方法以指定参数作为分隔符,将所有数组成员连接为一个字符串返回。
如果不提供参数,默认用逗号分隔
var a=[1,2,3,4];
a.join(' ') //'1 2 3 4'
a.join('|')//'1|2|3|4'
a.join()//"1,2,3,4"

如果数组成员是 undefined 或 null 或空位,会被转成空字符串
[undefined, null].join('#')
//'#'
['a',,'b'].join('-')45 //'a--b'

数组的join 配合字符串的 split 可以实现数组与字符串的互换
var arr = ["a","b","c"];
var myArr = arr.join(" ");
console.1og(myArr);
console.1og(myArr.split(" "));

#数组方法_concat()
concat 方法用于多个数组的合并。它将新数组的成员,添加到原数组成员的后部,然后返回一个新数组,原数组不变
['hello'].concat(['world']) //["he11o","world"]
['he11o'].concat(['world'], ['!'])  // ["he11o","world","!"]

除了数组作为参数,concat 也接受其他类型的值作为参数,添加到目标数组尾部。
[1,2,3].concat(4,5,6)   //[1,2,3,4,5,6]

应用场景
上拉加载,合并数据

#数组方法_reverse()
reverse 方法用于颠倒排列数组元素,返回改变后的数组。注意,该方法将改变原数组
var a = ['a','b','c'];
a.reverse() //['a','b','c']
a // ['c','b','c']

实现一个字符串反转排列
var str ="hello"
str.split("").reverse().join("")

#数组方法_indexOf()
indexo 方法返回给定元素在数组中第一次出现的位置,如果没有出现则返回 -1
var arr = ['a','b','c'];
arr.indexof('b')// 1
arr.indexof('y')// -1

indexof方法还可以接受第二个参数,表示搜索的开始位置
['wang','chao','fan'].indexOf('wang',1)// -1

#函数简介
函数是一段可以反复调用的代码块

函数的声明
function 命令: function命令声明的代码区块,就是一个函数。
function命令后面是函数名,函数名后面是对圆括号,里面是传入函数的参数。函数体放在大括号里面。
function print(s){
    console.log(s):
}

函数名的提升
lavaScript 引擎将函数名视同变量名,所以采用function命令声明函数时,整个函数会像变量声明一样,被提升到代码头部
add();
function add() {}

函数参数
函数运行的时候,有时需要提供外部数据,不同的外部数据会得到不同的结果,这种外部数据就叫参数
function square(x){
    console.log(x * x);
}
square(2)//4
square(3)//9

函数返回值
JavaScript函数提供两个接口实现与外界的交互,其中参数作为入口,接收外界信息;返回值作为出口,把运算结果反馈给外界
function getName(name){
    return name;
}

#对象概述
var user ={
    name:"itbaizhan",
    age:'13'
}

对象的每一个键名又称为“属性”(property),它的“键值“可以是任何数据类型。如果一个属性的值为函数,通常把这个属性称为“方法”,它可以像函数那样调用
var user={
    getName:function(name){
        return name;
    }
};
user.getName("itbaizhan") //itbaizhan
// 对象.属性
如果属性的值还是一个对象,就形成了链式引用
var user={
    name:"itbaizhan"
    age:13,
    container:{
        frontEnd:["web前端","Android","ios"],
        backEnd: ["java" ,"Python"]
    }
}
user.container.frontEnd //["web前端","Android","i0s"]

#math对象
Math是JavaScript 的原生对象,提供各种数学功能

Math.abs()
    math.abs 方法返回参数值的绝对值
    Math.abs(1)    // 1
    Math.abs(-1)    // 1

Math.max(),Math.min()
    math.max 方法返回参数之中最大的那个值, Math.min 返回最小的那个值。
    如果参数为空,math.min 返回 infinity,Math.max 返回 -Infinity 。
    Math.max(2,-1,5)    // 5
    Math.min(2,-1,5)    // -1
    Math.min()    //Infinity2
    Math.max()    //-Infinity

Math.floor(), Math.ceil()
    Math.floor 方法返回小于参数值的最大整数
    Math.floor(3.2)     //3
    Math.floor(-3.2)    //-4

    Mat.ceil 方法返回大于参数值的最小整数
    Math.ceil(3.2)      //4
    Math.ceil(-3.2)     //-3

Math.random()
    Math.random()返回0到1之间的一个伪随机数,可能等于0,但是一定小于1
    Math.random()       //0.28525367438365223

任意范围的随机数牛成函数如下
    function getRandomArbitrary(min,max){
        return Math.random()*(max- min)+ min;
    getRandomArbitrary(5,10)

#Date对象
Date 对象是 JavaScript 原生的时间库。它以1970年1月1日00:00:00作为时间的零点,可以表示的时间范围是前后各1亿天(单位为毫秒)

Date.now()
    Date.now 方法返回当前时间距离时间零点(1970年1月1日 00:00:00 UTC)的毫秒数,相当于 Unix 时间戳乘以1000

Date.now();     //1710839371253
Date(1635216733395);         // Tue Mar 19 2024 17:09:51 GMT+0800 (中国标准时间)
new Date();     // 最新的时间 Tue Mar 19 2024 17:16:16 GMT+0800 (中国标准时间)
getFullYear(),11,30,23,59,59,999        // 11,30,23,59,59,999  月,日,时,分,秒

时间戳
    时间戳是指格林威治时间1970年01月01日00时00分00秒(北京时间1970年01月01日08时00分00秒)起至现在的总秒数。
    格林威治和北京时间就是时区的不同
    Unix是20世纪70年代初出现的一个操作系统,Unix认为1970年1月1日0点是时间纪元。javaScript也就遵循了这一约束

Date 对象提供了一系列 get 方法,用来获取实例对象某个方面的值

实例方法get类
    getTime():返回实例距离1970年1月1日00:00:00的毫秒数
    getDate():返回实例对象对应每个月的几号(从1开始)
    getDay():返回星期几,星期日为0,星期一为1,以此类推
    getYear():返回距离1900的年数
    getFullYear():返回四位的年份
    getMonth():返回月份(0表示1月,11表示12月)
    getHours():返回小时(0-23)
    getMilliseconds():返回亳秒(0-999)
    getMinutes():返回分钟(0-59)
    getSeconds():返回秒(0-59)

    var d=new Date('january 6,2022');
    d.getDate()//6
    d.getmonth()//0
    d.getYear()// 122
    d.getFu11Year()// 2022

编写函数获得本年度剩余天数
    function leftDays(){
        var today =new Date();
        var endYear =new Date(today.getFullYear(),11,31,23,59,59, 999);
        var msPerDay=24*60*60 * 1000;
        return Math.round((endYear.getTime()-today.getTime())/ msPerDay);
    }

#DOM概述
DOM 是JavaScript 操作网页的接口,全称为“文档对象模型”(Document Object Model)。
它的作用是将网页转为一个JavaScript 对象,从而可以用脚本进行各种操作(比如对元素增删内容)

浏览器会根据 DOM 模型,将结构化文档HTML解析成一系列的节点,再由这些节点组成一个树状结构(DOMTree)。
所有的节点和最终的树状结构,都有规范的对外接口

DOM 只是一个接口规范,可以用各种语言实现。所以严格地说,DOM不是IavaScript语法的一部分,但是
DOM 操作是 lavaScript最常见的任务,离开了 DOM,lavaScript 就无法控制网页。另一方面,lavaScript 也是最常用于 DOM 操作的语言

节点
    DOM 的最小组成单位叫做节点(node)文档的树形结构(DOM 树),就是由各种不同类型的节点组成,每个节点可以看作是文档树的一片叶子

节点的类型有七种
    Document:整个文档树的顶层节点
    DocumentType:doctype标签
    Element:网页的各种HTML标签
    Attribute:网页元素的属性(比如class="right")
    Text:标签之间或标签包含的文本
    Comment:注释
    DocumentFragment:文档的片段

节点树
一个文档的所有节点,按照所在的层级,可以抽象成一种树状结构。这种树状结构就是 DOM 树。它有一个顶层节点,
下一层都是顶层节点的子节点,然后子节点又有自己的子节点,就这样层层衍生出一个金字塔结构倒过来就像一棵树

浏览器原生提供document节点,代表整个文档
    document
    // 整个文档树

除了根节点,其他节点都有三种层级关系
    父节点关系(parentNode):直接的那个上级节点
    子节点关系(childNodes):直接的下级节点
    同级节点关系(sibling):拥有同一个父节点的节点

Node.nodeType属性
不同节点的nodeType属性值和对应的常量如下
    文档节点(document):9,对应常量Node.DOCUMENT_NODE
    元素节点(element):1,对应常量Node.ELEMENT NODE
    属性节点(attr):2,对应常量Node.ATTRIBUTE_NODE
    文本节点(text):3,对应常量Node.TEXT_NODE
    文档片断节点(DocumentFragment):11,对应常量Node.DOCUMENT_FRAGMENT_NODE

    document.nodeType //9
    document.nodeType === Node.DOCUMENT_NODE // true

#document对象方法/获取元素
document获取元素
    getElementsByTagName
    getElementsByClassName
    getElementsByName
    getElementByld
    querySelector
    querySelectorAll

document.getElementsByTagName()
    document.getElemenseyTagName 方法搜索 HTML 标签名,'返回符合条件的元素'。它的返回值是一个类似数组对象
    (HTMLcolection 实例),可以实时反映 HTML 文档的变化。如果没有任何匹配的元素,就返回一个空集
    var paras =document.getElementsByTagName('p');

.innerHTML
    修改内容

如果传入*,就可以返回文档中所有 HTML 元素
    var allElements=document.getElementsByTagName('*');

document.getElementsByClassName()
    document.getElementsByClassName 方法返回一个类似数组的对象(HTMLCollection 实例),包括了'所有 class 名字
    符合指定条件的元素',元素的变化实时反映在返回结果中
    var elements=document.getElementsByClassName(names);
    由于 cass 是保留字,所以JavaScript 一律使用 cassName 表示 CSS 的 class
    参数可以是多个 class ,它们之间使用空格分隔
    var elements= document.getElementsByclassName('foo bar');

document.getElementsByName()
    document.getElementsByName 方法用于选择'拥有 name 属性的 HTML元素'(比如 <form>、<img>、<radio>等),
    返回一个类似数组的的对象(NodeList 实例),因为 name 属性相同的元素可能不止一个
    //  表单为 <form name='itbaizhan'></form>
    var forms = document.getElementsByName('itbaizhan');

document.getElementByld()
    document.getElementByd 方法返回匹配指定id 属性的元素节点。如果没有发现匹配的节点,则返回 'null'
    var elem=document.getElementById('paral');
    注意,该方法的参数是大小写敏感的。比如,如果某个节点的'id'属性是 'main' ,那么 document.getElemeniByd(main)将返回 'null'

document.querySelector()
    documenlquerselector 方法接受一个 CSS 选择器作为参数,返回匹配该选择器的元素节点。
    如果有多个节点满足匹配条件,则返回第一个匹配的节点。如果没有发现匹配的节点,则返回 'null'
    var ell=document.queryselector('.myclass');

document.querySelectorAll()
    document.querySelectorAll方法与querySelector查询选择器用法类似,区别是返回一个nodelist列表对象,包含所有匹配给定选择器的节点
    节点
    var elementList=document.querySelectorAll('.my class');

#document对象_方法/创建元素
document创建元素
    createElement
    createTextNode
    createAttribute

document.createElement()
    document.createElement 方法用来生成元素节点,并返回该节点
    var newDiv=document.createElement('div');

document.createTextNode()
    document.createTextNode 方法用来生成文本节点(Text 实例),并返回该节点。它的参数是文本节点的内容
    var newDiv=document.createElement('div');
    var newcontent=document.createTextNode('Hello');
    newDiv.appendchild(newcontent); //  将内容或者元素放到容器之中

document.createAttribute()
    document.createAttribute 方法生成一个新的属性节点(Attr实例),并返回它
    var attribute =document.createAttribute(name);
    
    var root=document.getElementById('root');
    var it=document.createAttribute('itbaizhan');
    it.value = 'it';
    root.setAttributeNode(it);

#Element对象_属性
    id
    classlist
    className
    innerHTML
    innerText

Element对象对应网页的 HTML 元素。每一个 HTML 元素,在 DOM 树上都会转化成一个Element节点对象

Element.id
    Element.id 属性返回指定元素的id 属性,该属性可读写
    var p1 =document.getElementsByClassName('class1')
    p1.id = 'id1'
    console.log(p1);

Element.className
    className 属性用来读写当前元素节点的 class 属性。它的值是一个字符串,每个 cass 之间用空格分割
    var p2 = document.getElementById('id2')
    p2.className = 'class2'
    console.log(p2);

Element.classList
    classList 对象有下列方法
    add() :增加一个 class。
    remove():移除一个 class。
    contains():检查当前元素是否包含某个 class.
    toggle0 :将某个 class 移入或移出当前元素,
var div=document.getElementById('myDiv');
div.classList.add('myCssclass');
div.classList.add('foo','bar');
div.classList.remove('myCssclass');
div.classList.toggle('myCssclass');// 如果 mycssclass 不存在就加入,否则移除7
div.classList.contains('myCssclass');// 返回 true 或者 false

Element.innerHTML
    Element.innerHTML属性返回一个字符串,等同于该元素包含的所有 HTML 代码。该属性可读写,常用来设置某节点的内容。
    它能改写所有元素节点的内容,包括<HTML>和 <body>元素
    el.innerHTML ='':

Element.innerText
    innerText 和 innerHTML类似,不同的是 innerText无法识别元素,会直接渲染成字符串

innerHTML和innerText的区别
读取,innerHTML识别标签返回所有内容,innerText返回文本
写入,innerHTMl识别标签返回文本innerText返回所有

#Element获取元素位置
    属性;描述
    clientHeight;获取元素高度包括 padding 部分,但是不包括 border、margin
    clientwidth;获取元素宽度包括 padding 部分,但是不包括 border、margin
    scrollHeight;元素总高度,它包括 padding ,但是不包括 border、 margin包括溢出的不可见内容
    scrollwidth;元素总宽度,它包括 padding ,但是不包括 border、 margin 包括溢出的不可见内容
    scrollLeft;元素的水平滚动条向右滚动的像素数量
    scrollTop;元素的垂直滚动条向下滚动的像素数量
    offsetHeight;元素的 CSS 垂直高度(单位像素),包括元素本身的高度、padding和 border
    offsetwidth;元素的 CSS 水平宽度(单位像素),包括元素本身的高度、padding和 border
    offsetLeft;到定位父级左边界的间距
    offsetTop;到定位父级上边界的间距

Element.clientHeight, Element.clientWidth
    Element.clienHeigh: 属性返回一个整数值,表示元素节点的 CSS 高度(单位像素),只对块级元素生效,
    对于行内元素返回0。如果块级元素没有设置 CSS 高度,则返回实际高度
   
    除了元素本身的高度,它还包括`padding部分,但是不包括border、margin 。
    如果有水平滚动条,还要减去水平滚动条的高度。注意,这个值始终是整数,如果是小数会被四舍五入。
    
    Elemen.clienwidth 属性返回元素节点的 CSS 宽度,同样只对块级元素有效,也是只包括元素本身的宽度和padding ,
    如果有垂直滚动条,还要减去垂直滚动条的宽度。
    
    document.documentElement 的 clientHeight属性,返回当前视口的高度(即浏览器窗口的高度)。
    document.body的高度则是网页的实际高度。

    // 视口高度
    document.documentElement.clientHeight
    // 网页总高度
    document.body.clientHeight

Element.scrollLeft, Element.scrollTop
    Element.scrollleft 属性表示当前元素的水平滚动条向右侧滚动的像素数量, Element.scrollTop 属性表示当前元素的
    垂直滚动条向下滚动的像素数量。对于那些没有滚动条的网页元素,这两个属性总是等于0

    如果要査看整张网页的水平的和垂直的滚动距离,要从 document.documentElement 元素上读取
    document.documentElement.scrollLeft
    document.documentElement.scrollTop

Element.offsetHeight, Element.offsetWidth
    Element.offsetHeignt 属性返回一个整数,表示元素的 CSS 垂直高度(单位像素),包括元素本身的高度
    padding 和 border,以及水平滚动条的高度(如果存在滚动条)。

Element.offsetwidth 属性表示元素的 CSS 水平宽度(单位像素),其他都与 Elemen.offsetHeight 一致。
    这两个属性都是只读属性,只比 Elemen.clieniHeight 和 Element.clientwidth 多了边框的高度或宽度。
    如果元素的 CSS设为不可见(比如 display:none；),则返回0

#操作CSS
HTML 元素的 styie 属性
    操作 CSS 样式最简单的方法就是使用网页元素节点的 setAttribute 方法直接操作网页元素的 style 属性
    var div1 = document.createElement('div')
    div1.className = 'div1'
    div1.setAttribute(
        'id',
        'id1'
    )
    div1.setAttribute(
        'style',
        'width:200px ; height:200px ; background-color:blue;'
    )
    console.log(div1);
    document.body.appendChild(div1)

元素节点的 style 属性
    var divstyle=document.queryselector('div').style;
    divstyle.backgroundcolor ='red';
    divstyle.border='1px solid black';
    divstyle.width='100px';
    divstyle.height='100px';
    divstyle.fontsize ='10em';

cssText属性
    var divstyle = document.querySelector('div').style:
    divstyle.cssText='background-color: red;'
        +'border: lpx solid black;'
        +'height: 100px;'
        +'width:100px;'
    
#事件处理程序
事件处理程序分为:
    HTML事件处理;缺点html与js不分离
    DOM0级事件处理;优点:html和js分离;缺点:无法添加多个事件,事件被覆盖
    DOM2级事件处理;优点:事件不会被覆盖;缺点:写起来麻烦

HTML事件处理
    <button onclick="clicktimes()">按钮</button>
    <script>
        function clicktimes(){
            console.log('点击了按钮')
        }
    </script>

    DOM0级事件处理
    <button id="id1">按钮</button>
    <script>
        var id1 = document.getElementById('id1')
        id1.onclick = function () {
            console.log('点击了1');
        }
        
        id1.onclick = function () {
            console.log('点击了2');
        }
    </script>

    DOM2级事件处理
    <button id="id1">按钮</button>
    <script>
        var id1 = document.getElementById('id1')
        id1.addEventListener('click',function () {
            console.log('点击了1');
        })
        id1.addEventListener('click',function () {
            console.log('点击了2');
        })
    </script>
#事件类型之鼠标事件
鼠标事件指与鼠标相关的事件,具体的事件主要有以下一些
    click:按下鼠标时触发
    dblclick:在同一个元素上双击鼠标时触发
    mousedown:按下鼠标键时触发
    mouseup:释放按下的鼠标键时触发
    mousemove:当鼠标在节点内部移动时触发。当鼠标持续移动时,该事件会连触发。
    mouseenter:鼠标进入一个节点时触发,进入子节点不会触发这个事件
    mouseleave:鼠标离开一个节点时触发,离开父节点不会触发这个事件
    mouseover:鼠标进入一个节点时触发,进入子节点会再一次触发这个事件 
    mouseout:鼠标离开一个节点时触发,离开父节点也会触发这个事件
    wheel:滚动鼠标的滚轮时触发

温馨提示
    这些方法在使用的时候,除了DOM2级事件,都需要添加前缀on

#Event事件对象
事件发生以后,会产生一个事件对象,作为参数传给监听函数

Event对象属性
    Event.Target
    Event.type

Event.target
    Event.target属性返回事件当前所在的节点
    <button id="btn1">按钮</button>
    <script>
        var btn1 = document.getElementById('btn1')
        btn1.onclick = function(event){
            console.log(event.target);
            event.target.innerHTML = '点击之后'
        }
    </script>
Event.type
    Event.type属性返回一个字符串,表示事件类型。事件的类型是在生成事件的时候。该属性只读

Event对象方法
    Event.preventDefault()
    Event.stopPropagation()

Event.preventDefault
    Event.preventDefault方法取消浏览器对当前事件的默认行为。比如点击链接后,浏览器默认会跳转到另一个页面,
    使用这个方法以后,就不会跳转了
    <button id="btn3">
        <a href="https://www.baidu.com/" id="a1">百度</a>
    </button>
    <script>
        var a1 = document.getElementById('a1')
        a1.onclick = function(e){
            e.preventDefault()
        }
    </script>


Event.stopPropagation()
    stopPropagation方法阻止事件在 DOM 中继续传播,防止再触发定义在别的节点上的监听函数,但是不包括在当前节点上其他的事件监听函数
    btn.onclick =function(e){
        e.stopPropagation();//阻止事件冒泡
        console.log("btn4");
    }

#事件类型之键盘事件
键盘事件由用户击打键盘触发,主要有keydown、keypress、keyup三个事件
    keydown:按下键盘时触发。
    keypress:按下有值的键时触发,即按下 Ctrl、Alt、Shift、Meta 这样无值的键,这个事件不会触发。对于有值的键,按下时先触发keydown事件,再触发这个事件
    keyup:松开键盘时触发该事件

username.onkeypress=function(e){
    console.log("keypress事件");
}

event对象
    keyCode:唯一标识//每个字母都有对应的自然数
    var username =document.getElementById("username");
    username.onkeydown = function(e){
        if(e.keyCode === 13){
            console.log("回车");
        }
    }
    username.target.value:内容

#事件类型之表单事件
表单事件是在使用表单元素及输入框元素可以监听的一系列事件
    input事件
    select事件
    Change事件
    reset事件
    submit事件

input事件
    input事件当 <input>、<selec>、<textarea>的值发生变化时触发。对于复选框(<input type=checkbox> )
    或单选框(<inputtype=radio>),用户改变选项时,也会触发这个事件

    input事件的一个特点,就是会连续触发,比如用户每按下一次按键,就会触发一次input事件。
    var username= document.getElementById("username");
    username.oninput =function(e){
        console.log(e.target.value);
    }

select事件
    select事件当在 <input>、<textarea>里面选中文本时触发
    <input id="test" type="text" value="select me!" />
    var elem=document.getElementById('test');
    elem.addEventListener('select',function(e){
        console.1og(e.type);//"select
    },false)



##################