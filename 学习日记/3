#JavaScript
JavaScript介绍
    JavaScript 是一种轻量级的脚本语言。所谓“脚本语言”，指的是它不具备开发操作系统的能力，
    而是只用来编写控制其他大型应用程序的“脚本”
    JavaScript 是一种嵌入式(embedded)语言。它本身提供的核心语法不算很多

为什么学习Javascript
    操控浏览器的能力
    广泛的使用领域
    易学性

JavaScript与ECMAScript的关系
    ECMAScript和JavaScript的关系是，前者是后者的规格，后者是前者的一种实现。在日常场合，这两个词是可以互换的。

#语句、标识符
语句
    JavaScript 程序的单位是行(line)，也就是一行一行地执行。一般情况下，每一行就是一个语句
    var num = 10;
    语句以分号结尾，一个分号就表示一个语句结束

标识符
    标识符(identifier)指的是用来识别各种值的合法名称。最常见的标识符就是变量名
    标识符是由:字母、美元符号($)、下划线()和数字组成，其中数字不能开头

温馨提示
    中文是合法的标识符，可以用作变量名(不推荐)

#变量
变量的重新赋值
    var num = 10;
    2num = 20;

变量提升
    JavaScript 引擎的工作方式是，先解析代码，获取所有被声明的变量，然后再一行一行地运行。
    这造成的结果，就是所有的变量的声明语句，都会被提升到代码的头部，这就叫做变量提升(hoisting)。
    console.1og(num);
    var num = 10;//结果是什么呢?

console.log()
    打印，可以在浏览器控制台看到结果


#JavaScript引入到文件
JavaScript常用引入方式
    嵌入HTML文件
    引入本地独立js文件
    引入网络来源文件

嵌入到HTML文件中
    <body>
        <script>
            var age =20
        </script>
    </body>

引入本地独立JS文件
    <body>
        <script type="text/javascript" src="./itbaizhan.js"> </script>
    </body>

引入网络来源文件
    <body>
        <script src="http://code.jquery.com/jquery1.2.1.min.js"></script>
    </body>
    网站页面控制台网络可以查看引入的状态

#JavaScript注释与常见的输出方式
    注释
        单行注释
        多行注释
    输出方式
        弹出框
        页面输出
        控制台输出

JavaScript注释
    源码中注释是不被引擎所解释的，它的作用是对代码进行解释。
    Javascript 提供两种注释的写法:一种是单行注释，用//起头;另一种是多行注释，放在/和/之间。
//这是单行注释

/*
这是
多行
注释
*/

嵌入在HTML文件中的注释
<!-- 注释 -->

JavaScript输出方式
    JavaScript有很多种输出方式，都可以让我们更直观的看到程序运行的结果
// 在浏览器中弹出一个对话框,然后把要输出的内容展示出来,alert都是把要输出的内容首先转换为 
字符串然后在输出的
alert("要输出的内容");

document.write("要输出的内容");

// 在控制台输出内容
console.1og("要输出的内容");

#数据类型
数据类型分类
    JavaScript 语言的每一个值，都属于某一种数据类型。JavaScript 的数据类型，共有六种。(ES6 又新增了第七种 Symbol 类型的值和第八种 BigInt类型)
    数值、布尔值、nul、字符串、undefined、对象

数据类型分类
原始类型(基础类型)
    数值、布尔值、字符串
    var age = 20;
    var name = “尚学堂”;
    var learn = true;

合成类型(复合类型)
    (object)对象:因为一个对象往往是多个原始类型的值的合成，可以看作是一个存放各种值的容器
var user= {
    name:"尚学堂",
    age:20,
    learn:true
}

温馨提示
    至于undefined和null，一般将它们看成两个特殊值。

#typeof运算符
数值-number
字符串-string
布尔值-boolean
对象-object

lavaScript 有三种方法，可以确定一个值到底是什么类型。而我们现在需要接触到的就是typeof

数值返回number
    typeof 123 //"number"

字符串返回string
    typeof '123'// "string"

布尔值返回boolean
    typeof false // "boolean"

对象返回object
    typeof {} // "object"

unll和undefined的区别
null与undefined都可以表示“没有”，含义非常相似。将一个变量赋值为undefined或null，老实说，语法效果几乎没区别。
既然含义与用法都差不多，为什么要同时设置两个这样的值，这不是无端增加复杂度，令初学者困扰吗?这与历史原因有关

#运算符之算数运算符
算数运算符
    加减乘除法运算符
    余数运算符
    自增运算符
    自减运算符

var num1 = 4
var num2 = 8

// 加减乘除
console.log(num1 + num2)
console.log(num1 - num2)
console.log(num1 * num2)
console.log(num1 / num2)

// 取余
console.log(num1 % num2)

// 自加自减，每次数值+1或-1
console.log(++ num1)
console.log(-- num1)

// ++放在后面和放在前面的区别，放在前面是先自加在打印，放在后面是先打印再自加
console.log(num2 ++);
console.log(num2);

//总结
var num3 = 2
var num4 = 3
console.log(num3++ + --num4);//4

#运算符之赋值运算符
运算符;表达式
=;赋值运算符
+=;x+=y等同于x=x+y
-=;x-=y等同于x=x-y
*=;x*=y等同于x=x*y
/=;x/=y等同于x=x/y
%=;x%=y等同于x=x%y

赋值运算符(Assignment Operators)用于给变量赋值
最常见的赋值运算符，当然就是等号(=)

// 将 1 赋值给变量 x
var x= 1;

// 将变量 y 的值赋值给变量 x
var x = y


#运算符之比较运算符
比较运算符;描述
<;小于运算符
>;大于运算符
<=;小于或等于运算符
>=;大于或等于运算符
==;相等运算符
===;严格相等运算符(数值和类型)
!=;不相等运算符
!==;严格不相等运算符(数值和类型)

比较运算符用于比较两个值的大小，然后返回一个布尔值，表示是否满足指定的条件
2 > 1 // true

#运算符之布尔运算符
布尔运算符
    取反运算符:!
    且运算符:&&
    或运算符:‖

取反运算符(!)
布尔值取反
!true // false
!false // true

非布尔值取反
    对于非布尔值，取反运算符会将其转为布尔值。可以这样记忆，以下六个值取反后为true，其他值都为false

温馨提示
    undefined
    nul
    false
    0
    NaN
    空字符串("")

且运算符(&&)
    多个条件都要满足
如果一个人一直做好事，突然有一天做了一件坏事，那么人们会认为这个人很虚伪，以前说不定都是装的!对这个人不在认可
console.log(10 < 20 && 10 > 5);// true

或运算符(||)
    满足一个条件即可
如果一个人一直做坏事，突然有一天做了一件好事，那么人们会认为这个人其实还不错，以前也许是另有原因!对这个人突然就认可了
console.10g(10 < 20 || 10 < 5);// true    

#条件语句之if语句
if结构先判断一个表达式的布尔值，然后根据布尔值的真伪，执行不同的语句。

if语句语法规范
if (布尔值){
    语句;
}

需要注意的是，“布尔值“往往由一个条件表达式产生的，必须放在圆括号中
var m= 3;
if(m === 3){
    m++;
}
console.log(m);//4

注意，if后面的表达式之中，不要混淆赋值表达式(=)、严格相等运算符(===)和相等运算符(==)。
尤其是赋值表达式不具有比较作用。
var x= 1;
var y=2;
if(2= y) {
    console.log(x);
}

#条件语句之if...else
if...else基本结构
    if代码块后面，还可以跟一个else代码块，表示不满足条件时，所要执行的代码。
if(m === 3){
    //满足条件时，执行的语句
} else {
    //不满足条件时，执行的语句
}

多个if...else连接
对同一个变量进行多次判断时，多个if...else语句可以连写在一起。
if(m ===0){
    //...
}else if(m===1){
    //...
}else if(m=== 2){
    //...
}else {
    //...
}

if...else嵌套
var eat = true;
var food ="猪肉炖粉条";
if(eat){
    if (food ="双椒鱼头"){
        console.log("双椒鱼头");
    }else{
        console.log("猪肉炖粉条");
    }
}else {
    console.log('不吃了');
}

else代码块总是与离自己最近的那个if语句配对

#条件语句之switch
多个if...else连在一起使用的时候，可以转为使用更方便的switch结构
switch(fruit){
    case"banana":
        //...
        break;
    case "apple":
        //...
        break;
    defaut:
        //...
}

需要注意的是，每个case代码块内部的break语句不能少，否则会接下去执行下一个case代码块，而不是跳出switch结构。

var x=1;

switch(x){
    case 1:
        console.1og('x等于1');
    case 2:
        console.1og('x等于2');
    default:
        console.1og('x 等于其他值');
}
//x等于1
//x等于2
//x等于其他值

#三元运算符
JavaScript还有一个三元运算符(即该运算符需要三个运算子)?：，也可以用于逻辑判断
(条件)? 表达式1:表达式2

这个三元运算符可以被视为if...else..的简写形式，因此可以用于多种场合,

判断一个整数是奇数与偶数
var num=12;
//判断是奇数还是偶数
if(num % 2 === 0){
    console.log("偶数");
}else{
    console.log("奇数");
}

num % 2 === 0 ? console.log("偶数") : console.log("奇数");
var result = num % 2 === 0 ? "偶数" : "奇数";
console.log(result)

#循环语句之for
循环语句用于重复执行某个操作
for语句就是循环命令，可以指定循环的起点、终点和终止条件。它的格式如下
for (初始化表达式; 条件; 迭代因子){
    语句
}

for语句后面的括号里面，有三个表达式
    初始化表达式(initialize):确定循环变量的初始值，只在循环开始时执行一次。
    布尔表达式(test):每轮循环开始时，都要执行这个条件表达式，只有值为真，才继续进行循环。
    迭代因子(increment):每轮循环的最后一个操作，通常用来递增循环变量。

//需求:从1打印到100
for(var i= 1;i<=100;i++){
    console.log(i);
}

// 需求:声明个x变量，输出所有小于这个变量的值(正整数)0 1 2 3 4 5 6 7 8 9
var x=10;
for(var i = 0;i<x;i++){
    console.log(i);
}

for语句的三个表达式，
可以省略任何一个也可以全部省略。
for( ; ; ){
    console.log('He1lo world');
}
温馨提示
如果三个都省略，结果就导致了一个无限循环(死循环)

实操
//循环输出1~100之间数字的和
//循环输出1000以内的奇数 不能被2整除的是奇数
// 打印九九乘法表

#循环语句之while
While语句包括一个循环条件和一段代码块，只要条件为真，就不断循环执行代码块。
while(条件){
    语句;
}

//需求:从1打印到100
var i=0;
while(i<100){
    console.1og('i 当前为:'+i);
    i=i+ 1;
}

下面的例子是一个无限循环，因为循环条件总是为真
while(true){
    console.log('He1lo，world');
}

所有for循环，都可以改写成while循环
// for
var x=3;
for(var i=0; i<x; i++){
    console.1og(i);
}
// while
var x=3;
var i=0;
while (i<x){
    console.log(i);
    i++;
}

#break语句和continue语句
break语句和continue语句都具有跳转作用，可以让代码不按既有的顺序执行

break
    break语句用于跳出代码块或循环
for(var i=0 ; i<5 ; i++){
    if(i === 3){
    break;
    }
console.log(i);
}

continue
    continue语句用于应即终止本轮循环返回循环结构的头部，开始下一轮循环
for(var i=0 ; i<5 ; i++){
    if(i === 3){
        continue ;
    }
    console.log(i);
}

#字符串
字符串就是零个或多个排在一起的字符，放在单引号或双引号之中
"itbaizhan"
'itbaizhan'

单引号字符串的内部，可以使用双引号。双引号字符串的内部，可以使用单引号
'key ="value'
"It's a long itbaizhan"

如果要在单引号字符串的内部，使用单引号，就必须在内部的单引号前面加上反斜杠，用来转义。双引号字符串内部使用双引号，也是如此
'Did she say \'Hello\'?'
//"Did she say 'He11o'?"

"Did she say \"Hello\"?"
// "Did she say "Hello"?"

温馨提示
    字符串默认只能写在一行内，分成多行将会报错

如果长字符串必须分成多行，可以在每一行的尾部使用反斜杠
var longstring = 'Long \
1ong \
string' ;
longstring
// "Long long long string"

length 属性
    length属性返回字符串的长度，该属性也是无法改变的
var s='itbaizhan';
s.length // 9

#字符串方法_charAt()
charAt 方法返回指定位置的字符，参数是从0开始编号的
var s= new string('itbaizhan');
s.charAt(1)//"t"

如果参数为负数，或大于等于字符串的长度charAt 返回空字符串
'itbaizhan'.charAt(-1)//""
'itbaizhan'.charAt(9)//""

#字符串方法_concat()
concat 方法用于连接两个字符串,返回一个新字符串.不改变原字符串
var sl = 'itbaizhan';
var s2 = 'sxt';

s1.concat(s2) // "itbaizhansxt"
s1 // "itbaizhan"

该方法可以接受多个参数
'sxt'.concat('itbaizhan','bjsxt')//'sxtitbaizhanbjsxt'

如果参数不是字符串，concat 方法会将其先转为字符串，然后再连接
var one = 1;
var two = 2;
var three ='3'
''.concat(one,two,three)//"123'



################################################